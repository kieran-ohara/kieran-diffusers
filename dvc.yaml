# DVC and Dreambooth are not designed to play nicely together.
#
# I hack them together by "splitting" the class-image-gen step from actual training.
---
stages:
  class_images:
    cmd: >-
      accelerate launch submodules/diffusers/examples/dreambooth/train_dreambooth.py
      --pretrained_model_name_or_path="${pretrained_model}"
      --class_data_dir="src/train/data/class-images/${class.prompt}"
      --class_prompt="${class.prompt}"
      --num_class_images="${class.count}"
      --instance_data_dir="src/train/data/instances/dummy"
      --instance_prompt="kodummy"
      --output_dir=src/train/model
      --with_prior_preservation
      --prior_loss_weight=1.0
      --resolution=512
      --train_batch_size=1
      --gradient_accumulation_steps=1
      --learning_rate="5e-06"
      --lr_scheduler="constant"
      --lr_warmup_steps=0
      --max_train_steps="1"
      --gradient_checkpointing
      --mixed_precision=fp16
      --use_8bit_adam
      && rm -rf src/train/model/${training_steps}
    params:
      - pretrained_model
      - class.prompt
      - class.count
    outs:
      - src/train/data/class-images/${class.prompt}
  train:
    cmd: >-
      accelerate launch submodules/diffusers/examples/dreambooth/train_dreambooth.py
      --pretrained_model_name_or_path="${pretrained_model}"
      --class_data_dir="src/train/data/class-images/${class.prompt}"
      --class_prompt="${class.prompt}"
      --num_class_images="${class.count}"
      --instance_data_dir="src/train/data/instances/${instance.prompt}"
      --instance_prompt="${instance.prompt}"
      --output_dir=src/train/model
      --with_prior_preservation
      --prior_loss_weight=1.0
      --resolution=512
      --train_batch_size=1
      --gradient_accumulation_steps=1
      --learning_rate="${learning_rate}"
      --lr_scheduler="constant"
      --lr_warmup_steps=0
      --max_train_steps="${training_steps}"
      --gradient_checkpointing
      --mixed_precision=fp16
      --use_8bit_adam
      && mv src/train/model/${training_steps} src/train/modelx
    params:
      - pretrained_model
      - instance.prompt
      - learning_rate
      - training_steps
    deps:
      - src/train/data/class-images/${class.prompt}
    outs:
      - src/train/modelx
  infer:
    foreach: ${infer.prompts}
    do:
      cmd: src/infer/infer.py -p "${item}" -i "${infer.instance}"
      deps:
        - src/train/modelx
      plots:
        - src/infer/output/${item}.png
